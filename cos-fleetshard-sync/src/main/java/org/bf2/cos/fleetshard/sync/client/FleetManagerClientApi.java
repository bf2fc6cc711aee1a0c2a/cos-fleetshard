/**
 * Connector Service Fleet Manager Private APIs
 * Connector Service Fleet Manager apis that are used by internal services.
 *
 * The version of the OpenAPI document: 0.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.bf2.cos.fleetshard.sync.client;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.ProcessingException;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;

import org.bf2.cos.fleet.manager.api.ApiException;
import org.bf2.cos.fleet.manager.model.ConnectorClusterStatus;
import org.bf2.cos.fleet.manager.model.ConnectorDeployment;
import org.bf2.cos.fleet.manager.model.ConnectorDeploymentList;
import org.bf2.cos.fleet.manager.model.ConnectorDeploymentStatus;
import org.bf2.cos.fleet.manager.model.ConnectorNamespace;
import org.bf2.cos.fleet.manager.model.ConnectorNamespaceList;

public interface FleetManagerClientApi {

    /**
     * Returns a list of connector deployments assigned to the cluster.
     */
    @GET
    @Path("/kafka_connector_clusters/{connector_cluster_id}/deployments/{deployment_id}")
    @Produces(MediaType.APPLICATION_JSON)
    ConnectorDeployment getConnectorDeploymentById(
        @PathParam("connector_cluster_id") String connectorClusterId,
        @PathParam("deployment_id") String deploymentId)
        throws ApiException, ProcessingException;

    /**
     * Returns a list of connector deployments assigned to the cluster.
     */
    @GET
    @Path("/kafka_connector_clusters/{connector_cluster_id}/deployments")
    @Produces(MediaType.APPLICATION_JSON)
    ConnectorDeploymentList getConnectorDeployments(
        @PathParam("connector_cluster_id") String connectorClusterId,
        @QueryParam("page") String page,
        @QueryParam("size") String size,
        @QueryParam("gt_version") Long gtVersion)
        throws ApiException, ProcessingException;

    /**
     * Returns a connector namespace assigned to the cluster.
     */
    @GET
    @Path("/kafka_connector_clusters/{connector_cluster_id}/namespaces/{namespace_id}")
    @Produces(MediaType.APPLICATION_JSON)
    ConnectorNamespace getConnectorNamespaceById(
        @PathParam("connector_cluster_id") String connectorClusterId,
        @PathParam("namespace_id") String namespaceId)
        throws ApiException, ProcessingException;

    /**
     * Returns all connector namespaces assigned to the cluster.
     */
    @GET
    @Path("/kafka_connector_clusters/{connector_cluster_id}/namespaces")
    @Produces(MediaType.APPLICATION_JSON)
    ConnectorNamespaceList getConnectorNamespaces(
        @PathParam("connector_cluster_id") String connectorClusterId)
        throws ApiException, ProcessingException;

    /**
     * update the connector deployment status
     */
    @PUT
    @Path("/kafka_connector_clusters/{connector_cluster_id}/deployments/{deployment_id}/status")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    void updateConnectorDeploymentStatus(
        @PathParam("connector_cluster_id") String connectorClusterId,
        @PathParam("deployment_id") String deploymentId,
        ConnectorDeploymentStatus connectorDeploymentStatus)
        throws ApiException, ProcessingException;

    /**
     * Update the status of a connector cluster
     */
    @PUT
    @Path("/kafka_connector_clusters/{connector_cluster_id}/status")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    void updateConnectorClusterStatus(
        @PathParam("connector_cluster_id") String connectorClusterId,
        ConnectorClusterStatus connectorClusterStatus)
        throws ApiException, ProcessingException;
}

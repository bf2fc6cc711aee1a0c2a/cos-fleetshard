name: Build and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  LANG: en_US.UTF-8
  IMAGE_REPO_USERNAME: ${{secrets.IMAGE_REPO_USERNAME}}
  IMAGE_REPO_PASSWORD: ${{secrets.IMAGE_REPO_PASSWORD}}
  IMAGE_REPO_HOSTNAME: ${{secrets.IMAGE_REPO_HOSTNAME}}
  IMAGE_REPO_NAMESPACE: ${{secrets.IMAGE_REPO_NAMESPACE}}
  OC_PROJECT: ${{ secrets.K8S_CLUSTER_DEV_NAMESPACE }}
  MAVEN_ARGS: -V -ntp -Dhttp.keepAlive=false -e

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        kubernetes:
        - 'v1.22.1'
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          server-id: github
          server-username: COS_PACKAGES_USERNAME
          server-password: COS_PACKAGES_TOKEN
      - name: Retrieve Project Metadata
        uses: radcortez/project-metadata-action@243817f1e0f2b4df4e012fc17efc45cff166425d
        id: metadata
        with:
          metadata-file-path: '.github/project.yaml'
          local-file: true
      - name: Login to quay.io
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.IMAGE_REPO_USERNAME }}
          password: ${{ secrets.IMAGE_REPO_PASSWORD }}
      - name: Kubernetes KinD Cluster
        uses: container-tools/kind-action@v1
        with:
          registry: false
          node_image: kindest/node:${{ matrix.kubernetes }}
      - name: "Install CRDs"
        run: |
          kubectl apply -f etc/kubernetes/managedconnectorclusters.cos.bf2.org-v1.yml
          kubectl apply -f etc/kubernetes/managedconnectoroperators.cos.bf2.org-v1.yml
          kubectl apply -f etc/kubernetes/managedconnectors.cos.bf2.org-v1.yml
          kubectl apply -f https://raw.githubusercontent.com/apache/camel-k/release-1.6.x/config/crd/bases/camel.apache.org_kameletbindings.yaml
          kubectl apply -f https://raw.githubusercontent.com/strimzi/strimzi-kafka-operator/0.25.0/install/cluster-operator/041-Crd-kafkaconnect.yaml
          kubectl apply -f https://raw.githubusercontent.com/strimzi/strimzi-kafka-operator/0.25.0/install/cluster-operator/047-Crd-kafkaconnector.yaml
      - name: Build container image and push it
        env:
          CONTAINER_VERSION: ${{steps.metadata.outputs.current-version}}
          QUARKUS_BASE_IMAGE: ${{ secrets.QUARKUS_BASE_IMAGE }}
          QUARKUS_PLATFORM: ${{ secrets.QUARKUS_PLATFORM }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COS_PACKAGES_ACCOUNT: ${{secrets.COS_PACKAGES_USERNAME}}
          COS_PACKAGES_TOKEN: ${{secrets.COS_PACKAGES_TOKEN}}
        run: |
          ./etc/scripts/build.sh
          ./etc/scripts/build_image.sh cos-fleetshard-sync
          ./etc/scripts/build_image.sh cos-fleetshard-operator-camel
          ./etc/scripts/build_image.sh cos-fleetshard-operator-debezium

  deploy:
    needs: build
    runs-on: ubuntu-latest
    container: openshift/origin-cli:latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Install OpenShift CLI tools
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          source: "mirror"
          skip_cache: "true"
          oc: "latest"
      - name: Verify OpenShift CLI tools
        run: |
          oc version
          kubectl version
      - name: Log in and set context
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.K8S_CLUSTER_DEV }}
          openshift_token: ${{ secrets.K8S_CLUSTER_DEV_TOKEN }}
          insecure_skip_tls_verify: false
          namespace: ${{ secrets.K8S_CLUSTER_DEV_NAMESPACE }}
      - name: Create Pull Secret
        run: |
          ./etc/scripts/create_pull_secret.sh
      - name: Deploy FleetShard CRDs
        run: |
          ./etc/scripts/deploy_fleetshard_crds.sh
      - name: Deploy FleetShard
        env:
          KUSTOMIZE_PROFILE: ${{ secrets.KUSTOMIZE_PROFILE }}
        run: |
          kubectl delete mctr --all -n ${OC_PROJECT}
          ./etc/scripts/deploy_fleetshard.sh
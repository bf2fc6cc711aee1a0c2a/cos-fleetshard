openapi: 3.0.0 # need this as first line to allow some IDEs to know this is an openapi document.
# Warning: This file should only be used if the endpoints are not yet ready to be public, or not suitable for public consumption (like the data plane endpoints).
# In most cases, you shouldn't need to add the endpoints here.
# Only add endpoints here when it is an explicit requirement, or if you know what you are doing.
# There should be no duplicated endpoints or schemas in these 2 files. They should only defined in one of them.
info:
  title: Kafka Service Fleet Manager
  version: 0.0.1
  description: Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.
servers:
  - url: https://api.openshift.com
    description: Main (production) server
  - url: https://api.stage.openshift.com
    description: Staging server
  - url: http://localhost:8000
    description: localhost
  - url: /
    description: current domain
paths:
  #
  # These are the connector related APIs
  #
  '/api/managed-services-api/v1/kafka-connector-types/{connector_type_id}':
    parameters:
      - name: connector_type_id
        description: The id of the connector type
        schema:
          type: string
        in: path
        required: true
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorType'
          description: The connector type matching the request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: No matching connector type exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: [ ]
      operationId: getConnectorTypeByID
      summary: Get a connector type by name and version

  /api/managed-services-api/v1/kafka-connector-types:
    get:
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorTypeList'
          description: A list of connector types
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: [ ]
      operationId: listConnectorTypes
      summary: Returns a list of connector types
  /api/managed-services-api/v1/kafka-connectors:
    parameters:
      - in: query
        name: kafka_id
        description: The kafka cluster id
        schema:
          type: string
    post:
      operationId: createConnector
      parameters:
        - in: query
          name: async
          description: Perform the action in an asynchronous manner
          schema:
            type: boolean
          required: true
      requestBody:
        description: Connector data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connector'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400CreationExample:
                  $ref: '#/components/examples/400CreationExample'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: The requested resource doesn't exist
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: An unexpected error occurred creating the connector
      security:
        - Bearer: [ ]
      summary: Create a new connector
    get:
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorList'
          description: A list of connectors
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: [ ]
      operationId: listConnectors
      summary: Returns a list of connector types
  '/api/managed-services-api/v1/kafkas-connectors/{connector_id}':
    parameters:
      - in: query
        name: kafka_id
        description: The kafka cluster id
        schema:
          type: string
      - name: connector_id
        description: The id of the connector
        schema:
          type: string
        in: path
        required: true
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
          description: The connector matching the request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: No matching connector type exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: [ ]
      operationId: getConnector
      summary: Get a connector
    delete:
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Deleted
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404DeleteExample:
                  $ref: '#/components/examples/404DeleteExample'
          description: No kafka request with specified id exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500DeleteExample:
                  $ref: '#/components/examples/500DeleteExample'
          description: Unexpected error occurred
      security:
        - Bearer: [ ]
      operationId: deleteConnector
      summary: Delete a connector

  # Endpoints for managing connector clusters and connector agent sync
  /api/managed-services-api/v1/kafka-connector-clusters:
    post:
      operationId: createConnectorCluster
      parameters:
        - in: query
          name: async
          description: Perform the action in an asynchronous manner
          schema:
            type: boolean
          required: true
      requestBody:
        description: Connector cluster data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorCluster'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorCluster'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400CreationExample:
                  $ref: '#/components/examples/400CreationExample'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: The requested resource doesn't exist
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: An unexpected error occurred creating the connector cluster
      security:
        - Bearer: [ ]
      summary: Create a new connector cluster
    get:
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorClusterList'
          description: A list of connector clusters
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: [ ]
      operationId: listConnectorClusters
      summary: Returns a list of connector clusters
  /api/managed-services-api/v1/kafka-connector-clusters/{connector_cluster_id}:
    parameters:
      - name: connector_cluster_id
        description: The id of the connector cluster
        schema:
          type: string
        in: path
        required: true
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorCluster'
          description: The connector cluster matching the request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: No matching connector cluster type exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: [ ]
      operationId: getConnectorCluster
      summary: Get a connector cluster
    delete:
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Deleted
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404DeleteExample:
                  $ref: '#/components/examples/404DeleteExample'
          description: No resource with specified id exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500DeleteExample:
                  $ref: '#/components/examples/500DeleteExample'
          description: Unexpected error occurred
      security:
        - Bearer: [ ]
      operationId: deleteConnectorCluster
      summary: Delete a connector cluster
  /api/managed-services-api/v1/kafka-connector-clusters/{connector_cluster_id}/addon-parameters:
    parameters:
      - name: connector_cluster_id
        description: The id of the connector cluster
        schema:
          type: string
        in: path
        required: true
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddonParameterList'
          description: The parameters that should be used to configure the managed connector addon on the cluster.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: No matching connector cluster type exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: [ ]
      operationId: getConnectorClusterAddonParameters
      summary: Get a connector cluster's addon parameters
  '/api/managed-services-api/v1/kafka-connector-clusters/{connector_cluster_id}/status':
    parameters:
      - name: connector_cluster_id
        description: The id of the connector cluster
        schema:
          type: string
        in: path
        required: true
    put:
      requestBody:
        description: Cluster status update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorClusterStatus'
        required: true
      responses:
        '200':
          description: Cluster status is updated
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400InvalidIdExample:
                  $ref: '#/components/examples/400InvalidIdExample'
          description: id value is not valid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          # This is deliberate to hide the endpoints for unauthorised users
          description: Auth token is not valid.
      security:
        - Bearer: [ ]
      operationId: updateKafkaConnectorAgentClusterStatus
      summary: Update the status of a connector agent cluster

  '/api/managed-services-api/v1/kafka-connector-clusters/{connector_cluster_id}/deployments':
    parameters:
      - name: connector_cluster_id
        description: The id of the connector cluster
        schema:
          type: string
        in: path
        required: true
    get:
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - in: query
          name: gt_version
          description: filters the connectors to those with a version greater than the given value
          schema:
            type: integer
            format: int64
        - in: query
          name: watch
          description: watch for changes to the resources and return them as a stream of watch events. Specify gt_version to specify the starting point.
          schema:
            type: boolean

      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorDeploymentList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/ConnectorDeploymentWatchEvent'
          description: A list of connector
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: [ ]
      operationId: listClusterAsignedConnectorDeployments
      summary: Returns a list of connector types

  '/api/managed-services-api/v1/kafka-connector-clusters/{connector_cluster_id}/deployments/{connector_id}/status':
    parameters:
      - name: connector_cluster_id
        description: The id of the connector cluster
        schema:
          type: string
        in: path
        required: true
      - name: connector_id
        description: The id of the connector
        schema:
          type: string
        in: path
        required: true
    put:
      operationId: updateConnectorDeploymentStatus
      summary: update the connector deployment status
      security:
        - Bearer: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorDeploymentStatus'
        required: true
      responses:
        '200':
          description: Cluster status is updated
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400InvalidIdExample:
                  $ref: '#/components/examples/400InvalidIdExample'
          description: id value is not valid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          # This is deliberate to hide the endpoints for unauthorised users
          description: Auth token is not valid.

  # Endpoints for data plane communications
  '/api/managed-services-api/v1/agent-clusters/{id}/status':
    put:
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        description: Cluster status update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataPlaneClusterUpdateStatusRequest'
        required: true
      responses:
        '200':
          description: Cluster status is updated
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400InvalidIdExample:
                  $ref: '#/components/examples/400InvalidIdExample'
          description: id value is not valid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          # This is deliberate to hide the endpoints for unauthorised users
          description: Auth token is not valid.
      security:
        - Bearer: [ ]
      operationId: updateAgentClusterStatus
      summary: Update the status of an agent cluster

  '/api/managed-services-api/v1/agent-clusters/{id}/kafkas/status':
    put:
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        description: Kafka clusters status update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataPlaneKafkaStatusUpdateRequest'
        required: true
      responses:
        '200':
          description: Status is updated for Kafka clusters
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400InvalidIdExample:
                  $ref: '#/components/examples/400InvalidIdExample'
          description: id value is not valid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          # This is deliberate to hide the endpoints for unauthorised users
          description: Auth token is not valid.
      security:
        - Bearer: [ ]
      operationId: updateKafkaClusterStatus
      summary: Update the status of Kafka clusters on an agent cluster

  '/api/managed-services-api/v1/agent-clusters/{id}/kafkas':
    get:
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        '200':
          description: The list of the ManagedKafkas for the specified agent cluster
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedKafkaList'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400InvalidIdExample:
                  $ref: '#/components/examples/400InvalidIdExample'
          description: id value is not valid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          # This is deliberate to hide the endpoints for unauthorised users
          description: Auth token is not valid.
      security:
        - Bearer: [ ]
      operationId: getKafkas
      summary: Get the list of ManagedaKafkas for the specified agent cluster

  '/api/managed-services-api/v1/agent-clusters/{id}':
    get:
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        '200':
          description: The ManagedKafkaAgent CR Spec
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataplaneClusterAgentConfig'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400InvalidIdExample:
                  $ref: '#/components/examples/400InvalidIdExample'
          description: id value is not valid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          # This is deliberate to hide the endpoints for unauthorised users
          description: Auth token is not valid.
      security:
        - Bearer: [ ]
      operationId: getKafkaAgent
      summary: Get the spec of the ManagedKafkaAgent CR spec

components:
  schemas:
    ObjectReference:
      type: object
      properties:
        id:
          type: string
        kind:
          type: string
        href:
          type: string
    List:
      required:
        - kind
        - page
        - size
        - total
        - items
      type: object
      properties:
        kind:
          type: string
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer

    ListReference:
      required:
        - kind
        - items
      type: object
      properties:
        kind:
          type: string

    PrivateObjectReference:
      type: object
      properties:
        id:
          type: string
        kind:
          type: string

    Error:
      allOf:
        - $ref: "#/components/schemas/ObjectReference"
        - type: object
          properties:
            code:
              type: string
            reason:
              type: string
            operation_id:
              type: string

    MetaV1Condition:
      type: object
      properties:
        type:
          type: string
        reason:
          type: string
        message:
          type: string
        status:
          type: string
        lastTransitionTime:
          type: string
          #format: date-time # enable this?? or just set it as pure plain string?

    ManagedKafkaCapacity:
      type: object
      properties:
        ingressEgressThroughputPerSec:
          type: string
        totalMaxConnections:
          type: integer
          format: int
        maxDataRetentionSize:
          type: string
        maxPartitions:
          type: integer
          format: int
        maxDataRetentionPeriod:
          type: string

    ManagedKafkaVersions:
      type: object
      properties:
        kafka:
          type: string
        strimzi:
          type: string

    ManagedKafka:
      allOf:
        - $ref: "#/components/schemas/PrivateObjectReference"
        - type: object
          properties:
            metadata:
              type: object
              properties:
                name:
                  type: string
                namespace:
                  type: string
                annotations:
                  type: object
                  properties:
                    bf2.org/id:
                      type: string
                    bf2.org/placementId:
                      type: string

            spec:
              type: object
              properties:
                capacity:
                  $ref: "#/components/schemas/ManagedKafkaCapacity"
                oauth:
                  type: object
                  properties:
                    clientId:
                      type: string
                    clientSecret:
                      type: string
                    tokenEndpointURI:
                      type: string
                    jwksEndpointURI:
                      type: string
                    validIssuerEndpointURI:
                      type: string
                    userNameClaim:
                      type: string
                    tlsTrustedCertificate:
                      type: string
                endpoint:
                  type: object
                  properties:
                    bootstrapServerHost:
                      type: string
                    tls:
                      type: object
                      properties:
                        cert:
                          type: string
                        key:
                          type: string
                versions:
                  $ref: "#/components/schemas/ManagedKafkaVersions"
                deleted:
                  type: boolean
              required:
                - deleted

    ManagedKafkaList:
      description: >-
        A list of ManagedKafka
      allOf:
        - $ref: "#/components/schemas/ListReference"
        - type: object
          example:
            kind: "ManagedKafkaList"
            items:
              $ref: '#/components/examples/ManagedKafkaExample'
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/ManagedKafka"
    ConnectorType:
      description: >-
        Represents a connector type supported by the API
      required:
        - name
        - version
        - json_schema
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            name:
              description: Name of the connector type.
              type: string
            version:
              description: Version of the connector type.
              type: string
            description:
              description: A description of the connector.
              type: string
            icon_href:
              description: URL to an icon of the connector.
              type: string
            labels:
              description: labels used to categorize the connector
              type: array
              items:
                type: string
                enum: [ sink, source ]
            json_schema:
              description: >-
                A json schema that can be used to validate a connectors
                connector_spec field.
              type: object # todo: replace with better type

    ConnectorTypeList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/ConnectorType'
    WatchEvent:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        error:
          nullable: true
          $ref: "#/components/schemas/Error"
        object:
          type: object
          nullable: true

    ConnectorList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Connector'

    Connector:
      description: A connector holds the configuration to connect a Kafka topic to another system.
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:

            metadata:
              type: object
              properties:
                kafka_id:
                  type: string
                owner:
                  type: string
                name:
                  type: string
                created_at:
                  format: date-time
                  type: string
                updated_at:
                  format: date-time
                  type: string
                resource_version:
                  type: integer
                  format: int64
            deployment_location:
              $ref: '#/components/schemas/ClusterTarget'
            connector_type_id:
              type: string
            connector_spec:
              type: object
            desired_state:
              type: string
            status:
              type: string

    ConnectorReifyRequest:
      description: ConnectorReifyRequest is used to create ConnectorDeploymentSpec objects
      type: object
      properties:
        connector_id:
          type: string
        resource_version:
          type: integer
          format: int64
        kafka_id:
          type: string
        cluster_id:
          type: string
        cluster_status:
          $ref: '#/components/schemas/ConnectorClusterStatus'
        connector_spec:
          type: object

    ConnectorDeployment:
      description: Holds the deployment configuration of a connector
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            metadata:
              type: object
              properties:
                created_at:
                  format: date-time
                  type: string
                updated_at:
                  format: date-time
                  type: string
                resource_version:
                  type: integer
                  format: int64
            spec:
              $ref: '#/components/schemas/ConnectorDeploymentSpec'
            status:
              $ref: '#/components/schemas/ConnectorDeploymentStatus'

    ConnectorDeploymentSpec:
      description: Holds the deployment specification of a connector
      type: object
      properties:
        connector_id:
          type: string
        operator_ids:
          type: array
          items:
            type: string
        resources:
          type: array
          items:
            type: object
        status_extractors:
          type: array
          items:
            type: object
            properties:
              apiVersion:
                type: string
              kind:
                type: string
              name:
                type: string
              jsonPath:
                type: string
              conditionType:
                type: string

    ConnectorDeploymentStatus:
      description: The status of connector deployment
      type: object
      properties:
        phase:
          type: string
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/MetaV1Condition'

    ConnectorDeploymentList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/ConnectorDeployment'

    ConnectorDeploymentWatchEvent:
      allOf:
        - $ref: '#/components/schemas/WatchEvent'
        - type: object
          properties:
            object:
              $ref: '#/components/schemas/ConnectorDeployment'

    ClusterTarget:
      discriminator:
        propertyName: kind
        mapping:
          addon: '#/components/schemas/AddonClusterTarget'
          cloud_provider: '#/components/schemas/CloudProviderClusterTarget'
      oneOf:
        - $ref: '#/components/schemas/AddonClusterTarget'
        - $ref: '#/components/schemas/CloudProviderClusterTarget'

    AddonClusterTarget:
      description: "Targets workloads to an addon cluster"
      type: object
      required:
        - kind
      properties:
        kind:
          type: string
        cluster_id:
          type: string

    CloudProviderClusterTarget:
      description: "Targets workloads to a cloud provider"
      type: object
      required:
        - kind
      properties:
        kind:
          type: string
        cloud_provider:
          type: string
        region:
          type: string
        multi_az:
          type: boolean

    AddonParameterList:
      description: "A list of addon parameters"
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/AddonParameter'

    AddonParameter:
      description: "A addon parameter"
      type: object
      properties:
        id:
          type: string
        value:
          type: string

    ConnectorCluster:
      description: "Schema for the request to update a data plane cluster's status"
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            metadata:
              type: object
              properties:
                owner:
                  type: string
                name:
                  type: string
                created_at:
                  format: date-time
                  type: string
                updated_at:
                  format: date-time
                  type: string
            status:
              type: string

    ConnectorClusterList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/ConnectorCluster'

    ConnectorClusterStatus:
      description: "Schema for the request to update a data plane cluster's status"
      type: object
      properties:
        phase:
          type: string
        version:
          type: string
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/MetaV1Condition'
        operators:
          description: the list of installed operators
          type: array
          items:
            type: object
            properties:
              id:
                description: the id of the operator
                type: string
              version:
                description: the version of the operator
                type: string
              namespace:
                description: the namespace to which the operator has been installed
                type: string
              status:
                description: the status of the operator
                type: string


    DataPlaneClusterUpdateStatusRequest:
      # TODO are there any fields that should be required?
      # TODO are there any fields that should be nullable? (this is, a pointer in the resulting generated Go code)
      description: "Schema for the request to update a data plane cluster's status"
      type: object
      properties:
        conditions:
          description: "The cluster data plane conditions"
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              reason:
                type: string
              message:
                type: string
              status:
                type: string
              lastTransitionTime:
                type: string
                #format: date-time # enable this?? or just set it as pure plain string?
        total:
          type: object
          properties:
            ingressEgressThroughputPerSec:
              type: string #an example is "40Gi", a k8s quantity. Should we have some special format at openapi level?" this example also happens on other fields
              nullable: true
            connections:
              type: integer # an example is 10000. Should we have some special format at openapi level? this example also happens on other fields
              nullable: true
            dataRetentionSize:
              type: string
              nullable: true
            partitions:
              type: integer
              nullable: true
        remaining:
          type: object
          properties:
            # TODO 'total', 'remaining' attributes share the same properties so should we refactor it to a common schema?
            ingressEgressThroughputPerSec:
              type: string #an example is "40Gi", a k8s quantity. Should we have some special format at openapi level?" this example also happens on other fields
              nullable: true
            connections:
              type: integer # an example is 10000. Should we have some special format at openapi level? this example also happens on other fields
              nullable: true
            dataRetentionSize:
              type: string
              nullable: true
            partitions:
              type: integer
              nullable: true
        nodeInfo:
          type: object
          properties:
            ceiling:
              type: integer
              nullable: true
            floor:
              type: integer
              nullable: true
            current:
              type: integer
              nullable: true
            currentWorkLoadMinimum:
              type: integer
              nullable: true
        resizeInfo:
          type: object
          properties:
            nodeDelta:
              type: integer
              nullable: true
            delta:
              type: object
              nullable: true
              properties:
                ingressEgressThroughputPerSec:
                  type: string #an example is "40Gi", a k8s quantity. Should we have some special format at openapi level?" this example also happens on other fields
                  nullable: true
                connections:
                  type: integer # an example is 10000. Should we have some special format at openapi level? this example also happens on other fields
                  nullable: true
                dataRetentionSize:
                  type: string
                  nullable: true
                partitions:
                  type: integer
                  nullable: true
      example:
        $ref: "#/components/examples/DataPlaneClusterUpdateStatusRequestExample"

    DataPlaneKafkaStatus:
      description: "Schema of the status object for a Kafka cluster"
      type: object
      properties:
        conditions:
          description: "The status conditions of a Kafka cluster"
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              reason:
                type: string
              message:
                type: string
              status:
                type: string
              lastTransitionTime:
                type: string
        # do we need this for now?
        capacity:
          description: "Capacity information of the data plane cluster"
          type: object
          properties:
            ingressEgressThroughputPerSec:
              type: string #example: 4Mi
            totalMaxConnections:
              type: integer #example: 500
            maxDataRetentionSize:
              type: string #example: 100Gi
            maxPartitions:
              type: integer #example: 100
            maxDataRetentionPeriod:
              type: string #example: P14D
        versions:
          description: "Version information related to a Kafka cluster"
          type: object
          properties:
            kafka:
              type: string
            strimzi:
              type: string

    DataPlaneKafkaStatusUpdateRequest:
      description: "Schema for the request to update the statuses of Kafka clusters from data plane"
      type: object
      additionalProperties:
        $ref: '#/components/schemas/DataPlaneKafkaStatus'
      example:
        $ref: '#/components/examples/DataPlaneKafkaUpdateStatusRequestExample'

    DataplaneClusterAgentConfig:
      description: "Configuration for the data plane cluster agent"
      type: object
      properties:
        spec:
          description: "Data plane cluster agent spec"
          type: object
          properties:
            observability:
              description: "Observability configurations"
              type: object
              properties:
                accessToken:
                  type: string
                channel:
                  type: string
                repository:
                  type: string
                tag:
                  type: string

  parameters:
    id:
      name: id
      description: The id of record
      schema:
        type: string
      in: path
      required: true
    page:
      name: page
      in: query
      description: Page index
      required: false
      schema:
        type: string
      examples:
        page:
          value: "1"
    size:
      name: size
      in: query
      description: Number of items in each page
      required: false
      schema:
        type: string
      examples:
        size:
          value: "100"

  examples:
    ManagedKafkaExample:
      value: { } # TODO fill this
    DataPlaneClusterUpdateStatusRequestExample:
      value: { } # TODO fill this
    DataPlaneKafkaUpdateStatusRequestExample:
      value:
        1iSY6RQ3JKI8Q0OTmjQFd3ocFRg:
          conditions:
            - type: Ready
              reason: KafkaInstanceReady
              message: installing
              status: "False"
              lastTransitionTime: "2018-01-01T00:00:00Z"
          capacity:
            ingressEgressThroughputPerSec: 4Mi
            totalMaxConnections: 500
            maxDataRetentionSize: 100Gi
            maxPartitions: 100
            maxDataRetentionPeriod: P14D
          versions:
            kafka: 2.4.1
            strimzi: 0.21.2
    400DeletionExample:
      value:
        id: "103"
        kind: "Error"
        href: "/api/managed-services-api/v1/errors/103"
        code: "MGD-SERV-API-103"
        reason: "Synchronous action is not supported, use async=true parameter"
        operation_id: "1iWIimqGcrDuL61aUxIZqBTqNRa"
    400CreationExample:
      value:
        id: "103"
        kind: "Error"
        href: "/api/managed-services-api/v1/errors/103"
        code: "MGD-SERV-API-103"
        reason: "Synchronous action is not supported, use async=true parameter"
        operation_id: "1iWIimqGcrDuL61aUxIZqBTqNRa"
    400InvalidQueryExample:
      value:
        id: "203"
        kind: "Error"
        href: "/api/managed-services-api/v1/errors/23"
        code: "MGD-SERV-API-23"
        reason: "Failed to parse search query: Unable to list kafka requests for api_kafka_service: MGD-SERV-API-23: Failed to parse search query: Unsupported column name for search: 'id'. Supported column names are: region, name, cloud_provider, name, status. Query invalid: id = 123"
        operation_id: "1lWDGuybIrEnxrAem724gqkkiDv"
    400InvalidIdExample:
      value:
        id: "203"
        kind: "Error"
        href: "/api/managed-services-api/v1/errors/21"
        code: "MGD-SERV-API-21"
        reason: "Bad request"
        operation_id: "1lWDGuybIrEnxrAem724gqkkiDv"
    404Example:
      value:
        id: "404"
        kind: "Error"
        href: "/api/managed-services-api/v1/errors/7"
        code: "MGD-SERV-API-7"
        reason: "The requested resource doesn't exist"
    404DeleteExample:
      value:
        id: "7"
        kind: "Error"
        href: "/api/managed-services-api/v1/errors/7"
        code: "MGD-SERV-API-7"
        reason: "KafkaResource with id='1iK3duVYIvv5YvLlyz1mGR3JyqN' not found"
        operation_id: "1iYO7g2g6HTdUKUa2ksH82kQD3y"
    401Example:
      value:
        id: "11"
        kind: "Error"
        href: "/api/managed-services-api/v1/errors/11"
        code: "MGD-SERV-API-11"
        reason: "Unable to verify JWT token: Required authorization token not found"
        operation_id: "1iY3UhEhwmXBpWPfI2lNekpd4ZD"
    403Example:
      value:
        id: "4"
        kind: "Error"
        href: "/api/managed-services-api/v1/errors/4"
        code: "MGD-SERV-API-4"
        reason: "User 'foo-bar' is not authorized to access the service."
        operation_id: "1lY3UiEhznXBpWPfI2lNejpd4YC"
    403MaxAllowedInstanceReachedExample:
      value:
        id: "5"
        kind: "Error"
        href: "/api/managed-services-api/v1/errors/5"
        code: "MGD-SERV-API-5"
        reason: "User 'foo-bar' has reached a maximum number of 6 allowed instances."
        operation_id: "1lY3UiEkxnXBpVPeI2oNejd3XB"
    409NameConflictExample:
      value:
        id: "36"
        kind: "Error"
        href: "/api/managed-services-api/v1/errors/36"
        code: "MGD-SERV-API-36"
        reason: "Kafka cluster name is already used"
        operation_id: "6kY0UiEkzkXCzWPeI2oYehd3ED"
    500Example:
      value:
        id: "9"
        kind: "Error"
        href: "/api/managed-services-api/v1/errors/9"
        code: "MGD-SERV-API-9"
        reason: "Unspecified error"
        operation_id: "1ieELvF9jMQY6YghfM9gGRsHvEW"
    500DeleteExample:
      value:
        id: "9"
        kind: "Error"
        href: "/api/managed-services-api/v1/errors/9"
        code: "MGD-SERV-API-9"
        reason: "error deleting syncset: OCM-EX-9: failed to delete syncset: ext-serviceapi-1ix03lndlmq0qfc7sita5sljv8e
          for cluster id: 1g5d88q0lrcdv4g7alb7slfgnj3dhbsj%!(EXTRA *errors.Error=identifier
          is '404', code is 'CLUSTERS-MGMT-404' and operation identifier is '1g5or50viu07oealuehrkc26dgftj1ac':
          Cluster '1g5d88q0lrcdv4g7alb7slfgnj3dhbsj' not found)"
        operation_id: "1iYTsWry6nsqb2sNmFj5bXpD7Ca"

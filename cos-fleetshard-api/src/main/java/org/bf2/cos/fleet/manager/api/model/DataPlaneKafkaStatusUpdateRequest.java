/*
 * Kafka Service Fleet Manager
 * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.bf2.cos.fleet.manager.api.model;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonTypeName;
import io.swagger.annotations.ApiModel;
import java.util.HashMap;
import java.util.Map;
import org.bf2.cos.fleet.manager.api.model.DataPlaneKafkaStatus;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Schema for the request to update the statuses of Kafka clusters from data plane
 */
@ApiModel(description = "Schema for the request to update the statuses of Kafka clusters from data plane")
@JsonPropertyOrder({
})
@JsonTypeName("DataPlaneKafkaStatusUpdateRequest")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-03-31T21:56:12.924952-07:00[America/Los_Angeles]")
public class DataPlaneKafkaStatusUpdateRequest extends HashMap<String, DataPlaneKafkaStatus> {

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        return super.equals(o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DataPlaneKafkaStatusUpdateRequest {\n");
        sb.append("    ").append(toIndentedString(super.toString())).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
